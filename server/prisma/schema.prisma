generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../zod-schemas/generated"
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  password String    @db.Char(60)
  avatar   String?
  created  DateTime  @default(now())
  projects Project[] @relation("UserToProjects")
}

model Project {
  id       Int      @id @default(autoincrement())
  name     String
  slug     String   @unique
  created  DateTime @default(now())
  icon     String?
  color    String?
  tasks    Task[]
  statuses Status[]
  user     User     @relation("UserToProjects", fields: [userId], references: [id])
  userId   Int
}

model Task {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  created     DateTime      @default(now())
  done        DateTime?     @default(now())
  priority    PriorityLevel
  statusId    Int
  status      Status        @relation("TaskToStatus", fields: [statusId], references: [id])
  parent      Task?         @relation("TaskToTask", fields: [parentId], references: [id])
  parentId    Int?
  project     Project       @relation(fields: [projectId], references: [id])
  projectId   Int
  order       Int           @default(0)
  due         DateTime?
  inWork      DateTime?     @default(now())
  files       File[]
  children    Task[]        @relation("TaskToTask")
  comments    Comment[]     @relation("CommentToTask")
}

model Comment {
  id       Int       @id @default(autoincrement())
  content  String
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  parentId Int?
  children Comment[] @relation("CommentToComment")
  task     Task      @relation("CommentToTask", fields: [taskId], references: [id])
  taskId   Int
  created  DateTime  @default(now())
}

model File {
  id      Int      @id @default(autoincrement())
  src     String
  task    Task     @relation(fields: [taskId], references: [id])
  taskId  Int
  created DateTime @default(now())
}

enum PriorityLevel {
  low
  normal
  high
  critical
}

model Status {
  id        Int     @id @default(autoincrement())
  name      String
  tasks     Task[]  @relation("TaskToStatus")
  projectId Int
  project   Project @relation(fields: [projectId], references: [id])
}
