generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../zod-schemas/generated"
}

generator zod-client {
  provider = "zod-prisma-types"
  output   = "../../client/src/zod-schemas/generated"
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  password String    @db.Char(60)
  avatar   String?
  created  DateTime  @default(now())
  projects Project[]
}

model Project {
  id      Int      @id @default(autoincrement())
  name    String
  created DateTime @default(now())
  icon    String?
  color   String?
  tasks   Task[]
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
}

model Task {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  created     DateTime  @default(now())
  done        DateTime? @default(now())
  priority    Priority  @relation(fields: [priorityId], references: [id])
  priorityId  Int
  status      Status    @relation(fields: [statusId], references: [id])
  statusId    Int
  parent      Task?     @relation("TaskToTask", fields: [parentId], references: [id])
  parentId    Int?
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   Int
  index       Int       @default(0)
  due         DateTime?
  in_work     DateTime? @default(now())
  files       File[]
  children    Task[]    @relation("TaskToTask")
  comments    Comment[]
}

model Comment {
  id       Int       @id @default(autoincrement())
  content  String
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  parentId Int?
  children Comment[] @relation("CommentToComment")
  task     Task      @relation(fields: [taskId], references: [id])
  taskId   Int
  created  DateTime  @default(now())
}

model File {
  id      Int      @id @default(autoincrement())
  src     String
  task    Task     @relation(fields: [taskId], references: [id])
  taskId  Int
  created DateTime @default(now())
}

model Priority {
  id    Int    @id @default(autoincrement())
  name  String
  color String
  task  Task[]
}

enum TASK_STATUSES {
  queue
  development
  done
}

model Status {
  id   Int           @id @default(autoincrement())
  name TASK_STATUSES
  task Task[]
}
